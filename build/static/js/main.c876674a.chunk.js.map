{"version":3,"sources":["todo/Todo.js","todo/Input.js","todo/TodoList.js","App.js","serviceWorker.js","index.js"],"names":["Todo","task","hasDone","toggleStatus","id","className","onClick","Input","props","state","value","handleChange","bind","handleSubmit","target","this","setState","event","preventDefault","onSubmit","autoFocus","type","onChange","placeholder","React","Component","TodoList","todoList","addTodo","toggleTodoStatus","slice","push","Date","getTime","todoId","map","todo","Object","assign","todoIndex","findIndex","todoComponents","key","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"qPAYeA,EAVF,YAA8C,IAAnCC,EAAkC,EAAlCA,KAAMC,EAA4B,EAA5BA,QAASC,EAAmB,EAAnBA,aAAcC,EAAK,EAALA,GACnD,OACE,uBACEC,UAAWH,EAAU,gBAAkB,kBACvCI,QAAS,kBAAMH,EAAaC,KAE3BH,IC+BQM,E,kDApCb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,CAACC,MAAO,IACrB,EAAKC,aAAe,EAAKA,aAAaC,KAAlB,gBACpB,EAAKC,aAAe,EAAKA,aAAaD,KAAlB,gBAJH,E,4DAOK,IAAVE,EAAS,EAATA,OACZC,KAAKC,SAAS,CAACN,MAAOI,EAAOJ,U,mCAGlBO,GACXA,EAAMC,iBACFH,KAAKN,MAAMC,QACbK,KAAKP,MAAMW,SAASJ,KAAKN,MAAMC,OAC/BK,KAAKC,SAAS,CAACN,MAAO,Q,+BAKxB,OACE,6BACE,0BAAMS,SAAUJ,KAAKF,cACnB,2BACEO,WAAS,EACTC,KAAK,OACLX,MAAOK,KAAKN,MAAMC,MAClBY,SAAUP,KAAKJ,aACfY,YAAY,gC,GA7BJC,IAAMC,WC+CXC,E,kDA5Cb,WAAYlB,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,CAACkB,SAAU,IACxB,EAAKC,QAAU,EAAKA,QAAQhB,KAAb,gBACf,EAAKiB,iBAAmB,EAAKA,iBAAiBjB,KAAtB,gBAJP,E,oDAOXX,GACNc,KAAKC,UAAS,SAACP,GACb,IAAMkB,EAAWlB,EAAMkB,SAASG,QAEhC,OADAH,EAASI,KAAK,CAAC9B,OAAMC,SAAS,EAAOE,IAAI,IAAI4B,MAAOC,YAC7C,CAACN,iB,uCAIKO,GACfnB,KAAKC,UAAS,SAACP,GACb,IAAMkB,EAAWlB,EAAMkB,SAASQ,KAAI,SAACC,GAAD,OAAUC,OAAOC,OAAO,GAAIF,MAC1DG,EAAYZ,EAASa,WAAU,SAACJ,GAAD,OAAUA,EAAKhC,KAAO8B,KAE3D,OADAP,EAASY,GAAWrC,SAAWyB,EAASY,GAAWrC,QAC5C,CAACyB,iB,+BAIF,IAAD,OACDc,EAAiB1B,KAAKN,MAAMkB,SAASQ,KAAI,gBAAElC,EAAF,EAAEA,KAAMC,EAAR,EAAQA,QAASE,EAAjB,EAAiBA,GAAjB,OAC7C,kBAAC,EAAD,CACEsC,IAAKtC,EACLA,GAAIA,EACJH,KAAMA,EACNC,QAASA,EACTC,aAAc,EAAK0B,sBAGvB,OACE,yBAAKxB,UAAU,YACb,oCACCoC,EACD,kBAAC,EAAD,CAAOtB,SAAUJ,KAAKa,e,GAvCPJ,IAAMC,WCEdkB,EAFH,kBAAM,kBAAC,EAAD,OCQEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.c876674a.chunk.js","sourcesContent":["import React from 'react';\n\nconst Todo = function ({task, hasDone, toggleStatus, id}) {\n  return (\n    <p\n      className={hasDone ? 'Todo Complete' : 'Todo Incomplete'}\n      onClick={() => toggleStatus(id)}\n    >\n      {task}\n    </p>\n  );\n};\nexport default Todo;\n","import React from 'react';\n\nclass Input extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {value: ''};\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  handleChange({target}) {\n    this.setState({value: target.value});\n  }\n\n  handleSubmit(event) {\n    event.preventDefault();\n    if (this.state.value) {\n      this.props.onSubmit(this.state.value);\n      this.setState({value: ''});\n    }\n  }\n\n  render() {\n    return (\n      <div>\n        <form onSubmit={this.handleSubmit}>\n          <input\n            autoFocus\n            type=\"text\"\n            value={this.state.value}\n            onChange={this.handleChange}\n            placeholder=\"Add your todo here...\"\n          />\n        </form>\n      </div>\n    );\n  }\n}\n\nexport default Input;\n","import React from 'react';\nimport Todo from './Todo';\nimport Input from './Input';\n\nclass TodoList extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {todoList: []};\n    this.addTodo = this.addTodo.bind(this);\n    this.toggleTodoStatus = this.toggleTodoStatus.bind(this);\n  }\n\n  addTodo(task) {\n    this.setState((state) => {\n      const todoList = state.todoList.slice();\n      todoList.push({task, hasDone: false, id: new Date().getTime()});\n      return {todoList};\n    });\n  }\n\n  toggleTodoStatus(todoId) {\n    this.setState((state) => {\n      const todoList = state.todoList.map((todo) => Object.assign({}, todo));\n      const todoIndex = todoList.findIndex((todo) => todo.id === todoId);\n      todoList[todoIndex].hasDone = !todoList[todoIndex].hasDone;\n      return {todoList};\n    });\n  }\n\n  render() {\n    const todoComponents = this.state.todoList.map(({task, hasDone, id}) => (\n      <Todo\n        key={id}\n        id={id}\n        task={task}\n        hasDone={hasDone}\n        toggleStatus={this.toggleTodoStatus}\n      />\n    ));\n    return (\n      <div className=\"TodoList\">\n        <h1>Todo</h1>\n        {todoComponents}\n        <Input onSubmit={this.addTodo} />\n      </div>\n    );\n  }\n}\n\nexport default TodoList;\n","import React from 'react';\nimport './App.css';\nimport TodoList from './todo/TodoList';\n\nconst App = () => <TodoList />;\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}